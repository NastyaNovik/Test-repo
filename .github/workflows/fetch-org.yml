name: Fetch All Org Commit Users

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  list-commit-users:
    runs-on: ubuntu-latest

    steps:
      - name: Fetch commit users for top C# org repos via GraphQL
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          ORG: Prod
        run: |
          set -euo pipefail

          echo "Fetching all repositories for org: $ORG via GraphQL..."
          repos=()
          cursor=null

          while true; do
            if [[ "$cursor" == "null" ]]; then
              after_param=""
            else
              after_param=", after: \"$cursor\""
            fi

            resp=$(curl -s -H "Authorization: bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
             -X POST -d " \
              { \
                \"query\": \"query { \
                  organization(login: \\\"$ORG\\\") { \
                    repositories(first: 100, $after_param, orderBy: {field: PUSHED_AT, direction: DESC}) { \
                    pageInfo { hasNextPage endCursor } \
                    nodes { name } \
                    } \
                  } \
                }\" \
            } \
            " https://api.github.com/graphql)

            if ! echo "$resp" | jq -e '.data.organization.repositories.nodes' >/dev/null 2>&1; then
              echo "Unexpected response from GraphQL"
              echo "$resp"
              exit 1
            fi

            new_repos=($(echo "$resp" | jq -r '.data.organization.repositories.nodes[].name'))
            repos+=("${new_repos[@]}")

            hasNext=$(echo "$resp" | jq -r '.data.organization.repositories.pageInfo.hasNextPage')
            cursor=$(echo "$resp" | jq -r '.data.organization.repositories.pageInfo.endCursor')

            echo "Fetched ${#repos[@]} repositories"

            if [[ "$hasNext" != "true" ]]; then
              break
            fi
          done

          echo "Total repositories fetched: ${#repos[@]}"
          echo

          tmpfile=$(mktemp)
          trap 'rm -f "$tmpfile"' EXIT

          for repo in "${repos[@]}"; do
            echo "Repository: $repo"
            page=1
            while true; do
              commits=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/$ORG/$repo/commits?per_page=100&page=$page") || commits="[]"
          
              if ! echo "$commits" | jq -e 'type=="array"' >/dev/null 2>&1; then
                message=$(echo "$commits" | jq -r '.message // empty')
                echo "Skipping repo \"$repo\" (page $page): unexpected response ${message:-unknown}"
                break
              fi
          
              count=$(echo "$commits" | jq 'length')
              if [[ "$count" -eq 0 ]]; then
                break
              fi

              echo "$commits" | jq -r '.[] | [(.author.login // ""), (.commit.author.name // ""), (.commit.author.email // "")] | @tsv' >> "$tmpfile"

              ((page++))
              sleep 0.2
            done
          done

          echo
          echo "Unique commit authors across all repos:"
          echo "-----------------------------------------"
          awk -F"\t" 'BEGIN{OFS=" | "} {if($1!=""||$2!=""||$3!="") print $1,$2,tolower($3)}' "$tmpfile" | sort -u
          echo "-----------------------------------------"
          echo "Total unique users: $(awk -F"\t" '{if($1!=""||$2!=""||$3!="") print $0}' "$tmpfile" | sort -u | wc -l)"
