# name: PR Slack Thread Integration

# on:
#   pull_request:
#     types: [opened, reopened, synchronize]

# jobs:
#   slack-pr-thread:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check out repo
#         uses: actions/checkout@v3

#       - name: Get thread_ts from PR comments
#         id: get_thread
#         uses: actions/github-script@v7
#         with:
#           script: |
#             const comments = await github.rest.issues.listComments({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               issue_number: context.issue.number,
#             });
#             const threadComment = comments.data.find(c => c.body.startsWith('SLACK_THREAD_TS:'));
#             const ts = threadComment ? threadComment.body.split('SLACK_THREAD_TS:')[1].trim() : '';
#             core.setOutput('thread_ts', ts);

#       - name: Prepare Slack variables
#         run: |
#           echo "THREAD_TS=${{ steps.get_thread.outputs.thread_ts }}" >> $GITHUB_ENV
#           echo "PR_URL=${{ github.event.pull_request.html_url }}" >> $GITHUB_ENV
#           echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
#           echo "PR_AUTHOR=${{ github.event.pull_request.user.login }}" >> $GITHUB_ENV

#       - name: Send message to Slack
#         env:
#           SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
#           GH_PAT: ${{ secrets.GH_PAT }}
#           PR_URL: ${{ env.PR_URL }}
#           PR_TITLE: ${{ env.PR_TITLE }}
#           PR_AUTHOR: ${{ env.PR_AUTHOR }}
#           THREAD_TS: ${{ env.THREAD_TS }}
#         run: |
#           echo "Current THREAD_TS: $THREAD_TS"
#           if [ -z "$THREAD_TS" ]; then
#             JSON=$(jq -n \
#               --arg channel "C09D2BV45PS" \
#               --arg text ":bell: *New PR*: <$PR_URL|$PR_TITLE>\n*Author*: $PR_AUTHOR" \
#               '{channel: $channel, text: $text}')
#             RESPONSE=$(curl -s -X POST \
#               -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
#               -H "Content-type: application/json" \
#               --data "$JSON" \
#               https://slack.com/api/chat.postMessage)
#             echo "Slack response: $RESPONSE"
#             TS=$(echo $RESPONSE | jq -r '.ts')
#             echo "THREAD_TS=$TS" >> $GITHUB_ENV
#             echo "Created new thread_ts: $TS"

#             RESPONSE_COMMENT=$(curl -s -X POST \
#               -H "Authorization: Bearer $GH_PAT" \
#               -H "Content-type: application/json" \
#               --data "{\"body\": \"SLACK_THREAD_TS: $TS\"}" \
#               https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments)
#             echo "Comment response: $RESPONSE_COMMENT"
#           else
#             JSON=$(jq -n \
#               --arg channel "C09D2BV45PS" \
#               --arg text ":arrow_up: PR Update: <$PR_URL|$PR_TITLE>" \
#               --arg thread_ts "$THREAD_TS" \
#               '{channel: $channel, text: $text, thread_ts: $thread_ts}')
#             RESPONSE=$(curl -s -X POST \
#               -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
#               -H "Content-type: application/json" \
#               --data "$JSON" \
#               https://slack.com/api/chat.postMessage)
#             echo "Slack response: $RESPONSE"
#             echo "Used existing thread_ts: $THREAD_TS"
#           fi

name: Print PR Data

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  show-pr-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Print raw event JSON
        run: echo '${{ toJson(github.event) }}'

      - name: Print PR data
        run: |
          echo "PR URL: ${{ github.event.pull_request.html_url }}"
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "PR Author: ${{ github.event.pull_request.user.login }}"

      - name: Get PR committer email
        run: |
          git fetch origin +refs/pull/${{ github.event.pull_request.number }}/merge
          git log -1 --pretty=format:'%ae'
          
      - name: Get PR diff
        run: |
          curl -s \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3.diff" \
          https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }} \
          > pr.diff

          python3 scripts/pr_diff.py pr.diff pr.clean.json

      - name: Generate PR summary via Vertex AI
        run: python3 scripts/generate_pr_summary.py pr.clean.json
